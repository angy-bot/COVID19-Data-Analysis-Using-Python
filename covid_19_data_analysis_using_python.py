# -*- coding: utf-8 -*-
"""Covid  - 19 Data Analysis Using Python.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-e_nZ_jj15EfIlhPTRZ5zQV12SdVvYzf

# Covid - 19 Data Analysis Using Python

In this project, we are going to work with the COVID19 dataset, published by John Hopkins University, which consists of the data related to the cumulative number of confirmed cases, per day, in each Country. Also, we have another dataset consist of various life factors, scored by the people living in each country around the globe.  We are going to merge these two datasets to see if there is any relationship between the spread of the virus in a country and how happy people are, living in that country.

## Import the modules
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

"""## Import Covid - 19 Dataset"""

# Import dataset "covi19_Confirmed_dataset.csv"

confirmed_data = pd.read_csv('/content/covid19_Confirmed_dataset.csv', sep=',')
confirmed_data.head()

# Check the Shape of the dataframe

confirmed_data.shape

columns =  confirmed_data.columns
columns

"""## Delete the Useless columns"""

# Latitude and Longitude are not important features

confirmed_data.drop(['Lat', 'Long'],
                    axis = 1,
                    inplace = True)

confirmed_data.head()

"""## Aggregating the rows by the country"""

confirmed_data_aggregated = confirmed_data.groupby('Country/Region').sum()

confirmed_data_aggregated.head()

confirmed_data_aggregated.shape

"""## Visualizing data related to a country for example China

"""

confirmed_data_aggregated.loc['China']

"""## Calculating a good measure"""

confirmed_data_aggregated.loc['China'].plot()

confirmed_data_aggregated.loc['China'].plot()
confirmed_data_aggregated.loc['Egypt'].plot()
confirmed_data_aggregated.loc['Italy'].plot()
confirmed_data_aggregated.loc['Spain'].plot()
plt.legend()

"""## Calculating the firs derivative of the curve"""

confirmed_data_aggregated.loc['China'].diff().plot()

"""This plot shows us the change in inflection rate day by day and what are looking for is the maximum number.

## Find maxmimum infection rate for China
"""

confirmed_data_aggregated.loc['China'].diff().max()

confirmed_data_aggregated.loc['Spain'].diff().max()

confirmed_data_aggregated.loc['Greece'].diff().max()

"""## Find maximum inflection rate for all of the countries"""

countries = list(confirmed_data_aggregated.index)
max_inflection_rates = []
for c in countries:
  max_inflection_rates.append(confirmed_data_aggregated.loc[c].diff().max())
max_inflection_rates

confirmed_data_aggregated['max_inflection_rates'] = max_inflection_rates
confirmed_data_aggregated.head()

"""## Create a new dataframe with only needed column"""

confirmed_data = pd.DataFrame(confirmed_data_aggregated['max_inflection_rates'])
confirmed_data.head()

"""## Importing the dataset"""

happiness_report = pd.read_csv('/content/worldwide_happiness_report.csv', sep = ',')
happiness_report.head()

"""## Let's drop the useless columns"""

useless_cols = ['Overall rank', 'Score', 'Generosity', 'Perceptions of corruption']

happiness_report.drop(useless_cols, axis = 1, inplace=True)
happiness_report.head()

"""## Changing the indice of the dataframe"""

happiness_report.groupby('Country or region')
happiness_report.head()

"""## Now let's join two dataset we have prepared

***Corona Dataset:***
"""

confirmed_data.head()

confirmed_data.shape

"""***World happiness report Dataset:***"""

happiness_report.head()

happiness_report.shape

# Inner Join

data = confirmed_data.join(happiness_report, how='inner')
data.head()

"""## Correlation Matrix"""

data.corr()

"""## Visualization of the results"""

data.head()

"""## Plotting GDP VS maximum infection rate"""

x = data['GDP per capita']
y = data['max_inflection_rates']
sns.scatterplot(x, y)

# We can see the values need different scaling

#Will apply log scaling to y
x = data["GDP per capita"]
y = data["max_inflection_rates"]
sns.scatterplot(x,np.log(y))

#Now we can see +ve correlation

#RegPlot
x = data["GDP per capita"]
y = data["max_inflection_rates"]

sns.regplot(x,np.log(y))

#Line fitted, +ve slope seen

"""## Plotting Social support vs maximum Infection rate"""

x = data["Social support"]
y = data["max_inflection_rates"]

sns.scatterplot(x,np.log(y))

x = data["Social support"]
y = data["max_inflection_rates"]

sns.regplot(x,np.log(y))

"""## Plotting Healthy life expectancy VS maximum Infection rate"""

x = data["Healthy life expectancy"]
y = data["max_inflection_rates"]

sns.scatterplot(x,np.log(y))

x = data["Healthy life expectancy"]
y = data["max_inflection_rates"]

sns.regplot(x,np.log(y))

"""## Plotting Freedom to make life choices vs maximum Infection rate"""

x = data["Freedom to make life choices"]
y = data["max_inflection_rates"]

sns.scatterplot(x,np.log(y))

x = data["Freedom to make life choices"]
y = data["max_inflection_rates"]

sns.regplot(x,np.log(y))